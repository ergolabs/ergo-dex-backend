version: '3'
services:
  kafka:
    image: bitnami/kafka:3.4.0
    container_name: kafka
    restart: always
    ports:
      - "9092:9092"
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_BROKER_ID: "1"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CFG_NODE_ID: "1"
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:9092 --topic hc --create --if-not-exists && kafka-topics.sh --bootstrap-server kafka:9092 --topic hc --describe" ]
      timeout: 10s
      interval: 15s
      retries: 5
    volumes:
      - "kafka-data:/bitnami/kafka"
    networks:
      - spectrum-network
  init-kafka:
    image: bitnami/kafka:3.4.0
    container_name: init-kafka
    working_dir: /opt/bitnami/kafka/bin
    command: [ "/bin/bash", "/etc/create_topic.sh" ]
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - "./create_topic.sh:/etc/create_topic.sh:rw"
  redis:
    image: redis:7.0-alpine
    container_name: redis
    restart: always
    volumes:
      - "redis-data:/data"
    networks:
      - spectrum-network
  utxo-tracker:
    image: spectrumlabs/ergo-utxo-tracker:latest
    container_name: ergo-utxo-tracker
    volumes:
      - "log-data:/var/log/dex-backend"
    env_file: config.env
    depends_on:
      - kafka
      - redis
    networks:
      - spectrum-network
  amm-executor:
    image: spectrumlabs/ergo-amm-executor:latest
    container_name: ergo-amm-executor
    restart: always
    volumes:
      - "log-data:/var/log/dex-backend"
    env_file: config.env
    depends_on:
      - kafka
      - poolresolver
    networks:
      - spectrum-network
  poolresolver:
    image: spectrumlabs/ergo-pool-resolver:latest
    container_name: poolresolver
    volumes:
      - "log-data:/var/log/dex-backend"
      - "poolresolver-data:/var/lib/pool-resolver:Z"
    env_file: config.env
    depends_on:
      - kafka
    networks:
      - spectrum-network
  events-tracker:
    image: spectrumlabs/ergo-bots-tracker:latest
    container_name: ergo-events-tracker
    volumes:
      - "log-data:/usr/src/events-streaming/log"
      - "${PWD}/rocks/tracker:/tmp/chain"
      - "${PWD}/rocks/pool:/tmp/mempool"
    env_file: config.env
    depends_on:
      kafka:
        condition: service_healthy
      utxo-tracker:
        condition: service_started
      init-kafka:
        condition: service_started
    networks:
      - spectrum-network

networks:
  spectrum-network:
    driver: bridge

volumes:
  redis-data:
    driver: local
  poolresolver-data:
    driver: local
  log-data:
    driver: local
  kafka-data:
    driver: local
